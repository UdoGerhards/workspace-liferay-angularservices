/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package eu.gerhards.liferay.services.angular.model.impl;

import aQute.bnd.annotation.ProviderType;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import eu.gerhards.liferay.services.angular.model.AngularBootstrap;
import eu.gerhards.liferay.services.angular.model.AngularBootstrapModel;
import eu.gerhards.liferay.services.angular.model.AngularBootstrapSoap;

import java.io.Serializable;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AngularBootstrap service. Represents a row in the &quot;AngularServices_AngularBootstrap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AngularBootstrapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AngularBootstrapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AngularBootstrapImpl
 * @see AngularBootstrap
 * @see AngularBootstrapModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AngularBootstrapModelImpl extends BaseModelImpl<AngularBootstrap>
	implements AngularBootstrapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a Bootstrap model instance should use the {@link AngularBootstrap} interface instead.
	 */
	public static final String TABLE_NAME = "AngularServices_AngularBootstrap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bootId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bootId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table AngularServices_AngularBootstrap (bootId LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table AngularServices_AngularBootstrap";
	public static final String ORDER_BY_JPQL = " ORDER BY angularBootstrap.bootId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AngularServices_AngularBootstrap.bootId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(eu.gerhards.liferay.services.angular.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.eu.gerhards.liferay.services.angular.model.AngularBootstrap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(eu.gerhards.liferay.services.angular.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.eu.gerhards.liferay.services.angular.model.AngularBootstrap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AngularBootstrap toModel(AngularBootstrapSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AngularBootstrap model = new AngularBootstrapImpl();

		model.setBootId(soapModel.getBootId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AngularBootstrap> toModels(
		AngularBootstrapSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AngularBootstrap> models = new ArrayList<AngularBootstrap>(soapModels.length);

		for (AngularBootstrapSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(eu.gerhards.liferay.services.angular.service.util.ServiceProps.get(
				"lock.expiration.time.eu.gerhards.liferay.services.angular.model.AngularBootstrap"));

	public AngularBootstrapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bootId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBootId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bootId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AngularBootstrap.class;
	}

	@Override
	public String getModelClassName() {
		return AngularBootstrap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bootId", getBootId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bootId = (Long)attributes.get("bootId");

		if (bootId != null) {
			setBootId(bootId);
		}
	}

	@JSON
	@Override
	public long getBootId() {
		return _bootId;
	}

	@Override
	public void setBootId(long bootId) {
		_bootId = bootId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AngularBootstrap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AngularBootstrap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AngularBootstrap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AngularBootstrapImpl angularBootstrapImpl = new AngularBootstrapImpl();

		angularBootstrapImpl.setBootId(getBootId());

		angularBootstrapImpl.resetOriginalValues();

		return angularBootstrapImpl;
	}

	@Override
	public int compareTo(AngularBootstrap angularBootstrap) {
		int value = 0;

		if (getBootId() < angularBootstrap.getBootId()) {
			value = -1;
		}
		else if (getBootId() > angularBootstrap.getBootId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AngularBootstrap)) {
			return false;
		}

		AngularBootstrap angularBootstrap = (AngularBootstrap)obj;

		long primaryKey = angularBootstrap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<AngularBootstrap> toCacheModel() {
		AngularBootstrapCacheModel angularBootstrapCacheModel = new AngularBootstrapCacheModel();

		angularBootstrapCacheModel.bootId = getBootId();

		return angularBootstrapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(3);

		sb.append("{bootId=");
		sb.append(getBootId());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(7);

		sb.append("<model><model-name>");
		sb.append("eu.gerhards.liferay.services.angular.model.AngularBootstrap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bootId</column-name><column-value><![CDATA[");
		sb.append(getBootId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AngularBootstrap.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AngularBootstrap.class
		};
	private long _bootId;
	private AngularBootstrap _escapedModel;
}